# code: language=Ansible
---
- name: Establish AppDynamics User
  hosts: all
  become: yes
  tasks:
    - name: Load Vaulted Credentials
      include_vars: "{{ vault_id | default('default') }}-vault.yaml"
      ignore_errors: yes
    - name: Create AppDynamics Group
      group:
        name: "{{ appd_group }}"
        system: yes
        state: present
    - name: Create AppDynamics User
      user:
        name: "{{ appd_user }}"
        group: "{{ appd_group }}"
        system: yes
        generate_ssh_key: yes
        state: present
    - name: Get appd user's passwd entry
      getent:
        database: passwd
        key: "{{ appd_user }}"
    - name: Slurp appd user's SSH public key
      slurp:
        src: "{{ getent_passwd[ appd_user ][4] }}/.ssh/id_rsa.pub"
      register: ssh_public_key
    - name: Set appd user's SSH public key as a fact
      set_fact:
        ssh_public_key: "{{ ssh_public_key['content'] | b64decode }}"
    - name: Create Installation Directory
      file:
        path: "{{ item }}"
        owner: "{{ appd_user }}"
        group: "{{ appd_group }}"
        state: directory
      loop:
        - "{{ appd_install_directory }}"
        - "{{ appd_tmp_directory }}"
    - name: Configure ulimits
      template:
        src: etc/security/limits.d/appdynamics.conf.j2
        dest: /etc/security/limits.d/appdynamics.conf
    - name: Install Required Packages
      package:
        name: "{{ item }}"
        state: present
      with_items: "{{ required_packages }}"
    - name: Configure /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['public_ip'] }}    {{ hostvars[item]['ansible_host'] }}"
      loop: "{{ groups['all'] }}"
      when: configure_etc_hosts | default(False)
    - name: Disable FirewallD
      service:
        name: firewalld
        state: stopped
        enabled: no
      when: disable_firewalld | default(False) and ansible_facts['os_family'] == "RHEL"
- name: Configure EC host for installation
  hosts: enterprise_console
  become: yes
  tasks:
    - name: Template Silent Installation Files
      template:
        src: "{{ item.name }}.j2"
        dest: "{{ appd_tmp_directory }}/{{ item.name }}"
        owner: "{{ appd_user }}"
        group: "{{ appd_group }}"
        mode: "{{ item.mode }}"
      loop:
        - name: silent.varfile
          mode: "0644"
        - name: silent_install.sh
          mode: "0755"
      loop_control:
        label: "{{ item.name }}"
- name: Configure Controller Hosts for installation from EC
  hosts: controller
  become: yes
  tasks:
    - name: Add Authorized Key
      authorized_key:
        user: "{{ appd_user }}"
        key: "{{ hostvars['ec']['ssh_public_key'] }}"
        state: present
- name: Configure ES Hosts for SSH communication from EC
  hosts: events_service
  become: yes
  tasks:
    - name: Add Authorized Key
      authorized_key:
        user: "{{ appd_user }}"
        key: "{{ hostvars['ec']['ssh_public_key'] }}"
        state: present
- name: Configure Secondary Host for SSH communication from Primary Host
  hosts: secondary_controller
  become: yes
  tasks:
    - name: Add Authorized Key
      authorized_key:
        user: "{{ appd_user }}"
        key: "{{ hostvars['primary_controller']['ssh_public_key'] }}"
        state: present
- name: Configure Primary Host for SSH communication from Secondary Host
  hosts: primary_controller
  become: yes
  tasks:
    - name: Add Authorized Key
      authorized_key:
        user: "{{ appd_user }}"
        key: "{{ hostvars['secondary_controller']['ssh_public_key'] }}"
        state: present
